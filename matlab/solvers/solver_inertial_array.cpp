#include <Eigen/Dense>
#include "mex.h"

using namespace Eigen;


MatrixXcd solver_inertial_array(const VectorXd& data)
{
	// Compute coefficients
    const double* d = data.data();
    VectorXd coeffs(33);
    coeffs[0] = -2*d[0];
    coeffs[1] = -3*d[1];
    coeffs[2] = -d[2] - 2*d[6];
    coeffs[3] = -d[7];
    coeffs[4] = -3*d[3];
    coeffs[5] = -2*d[4] - 2*d[10];
    coeffs[6] = -d[8] - d[11];
    coeffs[7] = -d[5] - 2*d[15];
    coeffs[8] = -d[12] - d[16];
    coeffs[9] = -d[17];
    coeffs[10] = -d[21] + 2*d[22];
    coeffs[11] = d[23];
    coeffs[12] = d[24];
    coeffs[13] = d[28];
    coeffs[14] = -d[1];
    coeffs[15] = -3*d[7];
    coeffs[16] = -2*d[9];
    coeffs[17] = -d[4] - d[10];
    coeffs[18] = -2*d[8] - 2*d[11];
    coeffs[19] = -3*d[13];
    coeffs[20] = -d[14] - 2*d[18];
    coeffs[21] = -d[19];
    coeffs[22] = -d[21] + 2*d[25];
    coeffs[23] = d[26];
    coeffs[24] = d[29];
    coeffs[25] = -d[3];
    coeffs[26] = -d[13];
    coeffs[27] = -2*d[12] - 2*d[16];
    coeffs[28] = -3*d[17];
    coeffs[29] = -3*d[19];
    coeffs[30] = -2*d[20];
    coeffs[31] = -d[21] + 2*d[27];
    coeffs[32] = d[30];

	// Setup elimination template
	static const int coeffs0_ind[] = { 0,14,25,1,0,14,2,25,17,2,1,2,15,17,6,3,2,15,16,6,26,3,16,26,0,14,1,0,14,2,25,4,17,2,1,0,14,2,15,25,17,7,5,4,17,18,7,3,2,1,2,15,16,17,6,27,6,5,18,19,27,3,2,15,16,6,26,20,6,19,20,3,16,26,0,14,25,4,17,1,0,14,2,25,17,5,4,17,18,2,1,0,14,2,15,25,17,7,6,7,8,6,5,4,17,18,19,3,2,1,2,15,16,17,7,6,27,28,26,8,7,8,20,28,6,5,18,19,3,2,15,16,6,27,26,20,29,8,20,29,6,19,3,16,26,20,4,17,0,14,25,7,7,8,5,4,17,18,1,14,0,2,25,17,7,27,8,7,8,20,6,5,4,17,18,19,2,2,1,15,17,7,6,27,28,20,9,21,8,7,8,20,6,5,18,19,3,15,2,16,6,27,28,26,20,29,30,9,21,30,8,20,6,19,16,3,26,20,29,7,8,4,17,14,25,0,7,28,9,21,8,7,8,20,5,17,4,18,7,2,17,1,27,28,29,9,21,8,7,8,20,6,18,5,19,27,15,6,28,2,20,29,30,9,21,8,20,19,6,20,16,26,29,30,3,9,21,7,8,17,7,4,28,30,9,21,8,8,7,20,28,18,27,5,29,30,0,14,1,0,14,2,25,2,1,14,2,15,0,25,17,3,2,2,15,16,1,17,6,3,15,16,2,6,26,16,3,26,14,0,25,4,17,2,0,14,1,25,17,5,4,17,18,15,1,14,2,0,25,2,17,7,6,6,5,17,18,19,4,16,2,2,15,1,17,7,3,6,27,26,6,18,19,5,3,15,16,2,6,27,26,20,19,6,16,3,26,20,17,14,0,4,25,7,7,8,18,4,17,2,14,1,25,5,17,0,7,27,8,7,8,20,19,5,17,18,4,7,15,2,2,17,6,6,1,27,28,20,8,8,20,7,6,18,19,5,27,16,15,3,6,28,26,2,20,29,20,8,19,6,20,16,26,29,3,8,17,4,0,25,14,7,7,28,9,21,20,7,8,18,17,5,7,1,17,2,8,27,4,28,29,9,21,8,8,20,7,28,19,18,6,27,2,6,15,20,5,29,30,21,9,20,8,29,19,20,30,3,26,16,6,21,8,7,4,7,17,9,28,30,9,21,20,8,8,28,5,27,18,29,7,30,14,0,25,2,0,1,14,25,17,15,1,0,25,14,2,2,17,6,10,11,16,2,1,17,2,3,15,6,12,26,11,10,11,22,12,3,2,6,15,16,26,23,11,22,23,3,26,16,17,4,0,14,25,7,10,11,18,4,5,1,2,0,25,14,17,17,7,27,11,10,11,22,19,5,4,7,17,6,2,15,1,17,2,6,18,27,12,20,12,23,11,10,11,22,12,6,5,27,18,3,16,2,6,15,26,19,20,23,31,12,23,31,11,22,23,6,20,19,3,26,16,10,11,8,7,4,17,25,14,0,7,28,12,12,23,11,10,11,22,20,7,8,5,18,4,7,17,17,2,1,27,8,28,12,29,23,12,23,11,10,11,22,12,8,7,28,8,6,19,5,27,18,6,15,2,20,20,29,23,31,12,23,11,22,23,31,8,29,20,6,20,19,26,16,3,12,23,10,11,12,21,9,7,8,7,17,4,28,30,31,12,23,11,11,10,22,12,23,9,8,20,7,28,8,27,18,5,29,21,30,31,12,23,22,11,23,31,9,30,21,8,29,20,20,19,6,14,0,25,10,11,2,1,0,14,17,25,11,10,11,22,15,2,1,2,6,17,12,13,24,11,11,22,10,12,16,3,2,15,26,6,23,32,13,24,32,22,11,23,3,16,26,11,10,17,4,7,0,14,25,12,13,24,12,23,22,10,11,11,18,5,4,17,27,7,1,2,12,17,23,13,24,12,23,11,11,22,10,12,19,6,5,18,20,27,2,15,23,6,31,32,13,24,32,23,12,22,11,23,31,6,19,20,3,16,26,11,10,0,14,25,12,13,24,22,10,11,11,12,1,2,17,23,13,24,11,10,12,11,22,23,2,15,6,32,24,13,32,11,23,22,3,16,26,13,24,23,11,10,12,12,8,7,28,4,17,7,31,32,13,24,12,23,22,11,11,12,23,10,32,20,8,7,8,29,28,5,18,31,27,12,23,11,12,10,31,9,21,28,8,7,30,13,24,32,23,12,31,22,23,11,8,20,29,6,19,20,23,12,31,22,23,11,9,30,21,29,20,8,23,31,12,30,21,9 };
	static const int coeffs1_ind[] = { 13,24,32,24,13,32,10,11,12,24,13,11,10,12,32,24,13,23,12,10,11,12,4,17,7,31,32,13,24,32,22,11,10,11,23,12,13,24,12,11,22,10,12,11,23,23,31,32,5,18,27,13,24,32,23,12,31,10,11,12,24,13,32,12,23,12,11,10,31,7,8,28,13,24,32,23,12,10,12,11,31,21,9,30,7,8,28,13,24,32,11,22,23,13,32,24,11,22,23,24,13,32,12,31,23,11,23,22,6,19,20,13,32,24,12,23,31,11,22,23,24,32,13,12,31,23,23,22,11,8,20,29,24,13,32,23,31,11,23,22,12,9,21,30,8,20,29,13,24,12,23,31,32,32,24,13,12,23,31,13,32,24,31,23,12,9,21,30,24,32,13,12,31,23,9,21,30 };

	static const int C0_ind[] = { 0,3,84,88,89,90,91,92,172,176,177,178,179,180,260,264,265,266,267,268,348,353,354,356,445,450,533,534,537,538,611,616,619,621,622,623,624,625,626,641,699,700,704,705,706,707,708,709,710,711,712,713,714,729,787,788,792,793,794,795,796,798,799,800,801,817,875,876,881,882,884,887,888,905,979,984,1055,1061,1066,1067,1068,1071,1072,1124,1143,1149,1150,1153,1154,1155,1156,1157,1158,1159,1160,1168,1212,1227,1231,1232,1235,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1256,1257,1300,1315,1316,1319,1320,1321,1322,1323,1324,1326,1327,1328,1329,1332,1333,1334,1335,1344,1345,1388,1403,1404,1409,1410,1412,1415,1416,1421,1422,1432,1433,1507,1512,1513,1516,1523,1583,1589,1594,1595,1596,1599,1600,1601,1602,1603,1604,1605,1611,1652,1671,1677,1678,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1696,1699,1740,1755,1759,1760,1763,1766,1767,1768,1769,1772,1773,1774,1775,1777,1778,1779,1780,1781,1784,1785,1787,1828,1843,1844,1849,1850,1852,1855,1856,1861,1862,1866,1867,1869,1872,1873,1947,1952,1953,1956,1958,1959,1962,1963,2023,2029,2034,2035,2036,2039,2040,2041,2042,2043,2044,2045,2046,2047,2050,2051,2092,2111,2118,2121,2124,2125,2126,2127,2129,2130,2131,2132,2133,2134,2135,2136,2138,2139,2180,2195,2207,2208,2213,2214,2218,2219,2221,2222,2223,2224,2225,2226,2299,2304,2305,2308,2310,2311,2314,2315,2375,2388,2391,2393,2394,2395,2396,2397,2398,2399,2402,2403,2444,2492,2496,2580,2581,2583,2584,2634,2668,2669,2670,2671,2672,2673,2684,2722,2756,2757,2758,2759,2760,2761,2772,2810,2845,2846,2847,2849,2860,2898,2934,2937,2948,3026,3040,3078,3108,3112,3114,3115,3117,3128,3157,3166,3196,3197,3199,3200,3202,3203,3204,3205,3206,3207,3216,3245,3250,3254,3284,3285,3286,3287,3288,3289,3290,3291,3292,3293,3294,3295,3300,3304,3333,3338,3342,3373,3374,3375,3377,3379,3380,3381,3382,3383,3388,3421,3426,3462,3465,3468,3470,3471,3476,3554,3560,3562,3568,3569,3606,3636,3640,3642,3643,3645,3648,3649,3650,3651,3656,3657,3658,3685,3694,3724,3725,3727,3728,3730,3731,3732,3733,3734,3735,3736,3737,3738,3739,3744,3745,3746,3773,3778,3782,3813,3814,3815,3817,3819,3820,3821,3822,3823,3824,3825,3826,3827,3828,3833,3834,3861,3866,3902,3905,3908,3910,3911,3913,3915,3916,3922,3994,4000,4002,4005,4006,4007,4008,4009,4046,4076,4080,4082,4083,4085,4088,4089,4090,4091,4093,4094,4095,4096,4097,4098,4125,4134,4165,4167,4171,4172,4173,4174,4175,4176,4177,4178,4179,4181,4182,4183,4185,4186,4213,4218,4254,4257,4260,4262,4263,4265,4267,4268,4269,4270,4271,4274,4346,4352,4354,4357,4358,4359,4360,4361,4398,4435,4437,4440,4441,4442,4443,4445,4446,4447,4449,4450,4477,4539,4544,4573,4627,4628,4632,4642,4643,4661,4715,4716,4717,4718,4719,4720,4730,4731,4749,4752,4755,4803,4804,4805,4806,4807,4808,4818,4819,4836,4837,4840,4841,4842,4843,4844,4892,4893,4894,4895,4906,4907,4924,4929,4930,4932,4981,4982,4983,5067,5072,5073,5074,5081,5101,5109,5114,5155,5156,5160,5161,5162,5163,5164,5165,5169,5170,5171,5189,5197,5198,5201,5202,5243,5244,5245,5246,5247,5248,5249,5250,5251,5252,5253,5257,5258,5259,5275,5277,5280,5283,5286,5287,5288,5289,5305,5332,5333,5334,5335,5337,5338,5339,5340,5341,5345,5346,5347,5363,5364,5369,5370,5372,5375,5376,5393,5421,5422,5423,5427,5428,5429,5467,5472,5507,5512,5513,5514,5518,5519,5520,5521,5541,5543,5549,5554,5555,5556,5559,5560,5595,5596,5600,5601,5602,5603,5604,5605,5606,5607,5608,5609,5610,5611,5612,5629,5631,5638,5641,5644,5645,5646,5647,5656,5684,5685,5686,5687,5689,5690,5691,5692,5693,5694,5695,5696,5697,5698,5699,5700,5715,5727,5728,5733,5734,5744,5745,5773,5774,5775,5779,5780,5781,5782,5783,5784,5819,5824,5825,5828,5835,5859,5864,5865,5866,5870,5871,5872,5873,5893,5895,5908,5911,5913,5914,5915,5916,5917,5923,5948,5953,5954,5955,5956,5957,5958,5959,5960,5961,5962,5963,5964,5997,5998,6002,6003,6005,6008,6037,6038,6039,6043,6044,6045,6046,6047,6048,6141,6142,6145,6188,6192,6229,6230,6231,6232,6233,6234,6276,6277,6279,6280,6317,6318,6319,6320,6321,6322,6330,6336,6339,6365,6366,6367,6369,6380,6405,6406,6407,6408,6409,6410,6418,6420,6425,6426,6428,6454,6457,6468,6495,6496,6498,6546,6560,6581,6582,6585,6587,6588,6593,6598,6605,6610,6628,6632,6634,6635,6637,6648,6669,6670,6671,6672,6673,6674,6675,6676,6677,6681,6686,6694,6697,6717,6719,6723,6724,6725,6726,6727,6757,6758,6759,6760,6761,6762,6763,6764,6765,6769,6770,6771,6783,6784,6801,6806,6809,6812,6814,6815,6820,6847,6848,6850,6851,6852,6857,6915,6920,6942,6943,6944,6949,6980,6984,7003,7004,7008,7018,7019,7030,7031,7032,7037,7069,7071,7092,7093,7094,7095,7106,7107,7118,7119,7120,7122,7158,7161,7172,7181,7182,7183,7206,7207,7208,7227,7232,7250,7256,7258,7264,7265,7285,7286,7289,7291,7292,7297,7302,7303,7316,7319,7339,7341,7344,7345,7346,7347,7353,7354,7372,7373,7374,7375,7376,7377,7378,7379,7380,7381,7385,7409,7412,7414,7415,7418,7419,7449,7450,7454,7455,7456,7457,7493,7494,7504,7516,7518,7519,7521,7523,7530,7551,7552,7554,7555,7556,7561,7586,7587,7589,7590,7591,7594,7627,7628,7629,7630,7631,7632,7678,7679,7682,7718,7719,7720 } ;
	static const int C1_ind[] = { 78,79,80,157,158,161,166,167,168,227,232,245,246,249,261,298,312,315,320,321,322,329,342,343,344,349,350,404,418,419,421,422,423,424,425,426,475,477,492,497,498,499,500,501,505,506,507,517,518,519,520,585,586,593,597,598,601,603,604,609,656,658,665,673,674,678,679,680,681,694,695,696,721,724,731,744,746,749,750,751,753,773,774,777,779,780,785,863,864,866,870,871,872,933,934,935,951,952,954,1004,1006,1007,1021,1022,1023,1027,1028,1029,1046,1047,1048,1115,1116,1117,1127,1128,1130,1131,1132,1137,1185,1187,1194,1203,1204,1205,1206,1207,1208,1222,1223,1224,1250,1251,1253,1273,1275,1277,1278,1279,1282,1303,1304,1306,1307,1308,1313,1395,1396,1398,1399,1400,1401,1470,1471,1472,1483,1484,1489,1541,1542,1543,1558,1559,1560,1574,1575,1576,1606,1607,1610,1629,1630,1631,1659,1660,1665 };

	MatrixXd C0 = MatrixXd::Zero(88,88);
	MatrixXd C1 = MatrixXd::Zero(88,19);
	for (int i = 0; i < 1007; i++) { C0(C0_ind[i]) = coeffs(coeffs0_ind[i]); }
	for (int i = 0; i < 177; i++) { C1(C1_ind[i]) = coeffs(coeffs1_ind[i]); } 

	MatrixXd C12 = C0.partialPivLu().solve(C1);

	// Setup action matrix
	Matrix<double,25, 19> RR;
	RR << -C12.bottomRows(6), Matrix<double,19,19>::Identity(19, 19);

	static const int AM_ind[] = { 21,12,9,0,11,1,13,14,2,18,17,3,19,20,4,22,23,24,5 };
	Matrix<double, 19, 19> AM;
	for (int i = 0; i < 19; i++) {
		AM.row(i) = RR.row(AM_ind[i]);
	}

	Matrix<std::complex<double>, 3, 19> sols;
	sols.setZero();

	// Solve eigenvalue problem
	EigenSolver<Matrix<double, 19, 19> > es(AM);
	ArrayXcd D = es.eigenvalues();	
	ArrayXXcd V = es.eigenvectors();

    V = (V / V.row(0).array().replicate(19, 1)).eval();

    sols.row(0) = V.row(1).array();
    sols.row(1) = V.row(9).array();
    sols.row(2) = D.transpose().array();

	return sols;
}

// Action =  z
// Quotient ring basis (V) = 1,x,x^2,x^2*z,x*y,x*y*z,x*z,x*z^2,x*z^3,y,y^2,y^2*z,y*z,y*z^2,y*z^3,z,z^2,z^3,z^4,
// Available monomials (RR*V) = x^2*z^2,x*y*z^2,x*z^4,y^2*z^2,y*z^4,z^5,1,x,x^2,x^2*z,x*y,x*y*z,x*z,x*z^2,x*z^3,y,y^2,y^2*z,y*z,y*z^2,y*z^3,z,z^2,z^3,z^4,


void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
	if (nrhs != 1) {
		mexErrMsgIdAndTxt("automatic_generator_cvpr:inertial_array:nrhs", "One input required.");
	}
	if (nlhs != 1) {
		mexErrMsgIdAndTxt("automatic_generator_cvpr:inertial_array:nlhs", "One output required.");
	}    
	if (!mxIsDouble(prhs[0]) || mxIsComplex(prhs[0])) {
		mexErrMsgIdAndTxt("automatic_generator_cvpr:inertial_array:notDouble", "Input data must be type double.");
	}
	if(mxGetNumberOfElements(prhs[0]) % 31 != 0) {
		mexErrMsgIdAndTxt("automatic_generator_cvpr:inertial_array:incorrectSize", "Input size must be multiple of 31.");
	}
	int n_instances = mxGetNumberOfElements(prhs[0]) / 31;
	double *input = mxGetPr(prhs[0]);
	plhs[0] = mxCreateDoubleMatrix(3,19*n_instances,mxCOMPLEX);
	double* zr = mxGetPr(plhs[0]);
	double* zi = mxGetPi(plhs[0]);
	for(int k = 0; k < n_instances; k++) {
		const VectorXd data = Map<const VectorXd>(input + k*31, 31);
		MatrixXcd sols = solver_inertial_array(data);
		Index offset = k*sols.size();
		for (Index i = 0; i < sols.size(); i++) {
			zr[i+offset] = sols(i).real();
			zi[i+offset] = sols(i).imag();
		}
	}
}

